"""
Product Cost Cache Manager - Disk tabanlƒ± cache sistemi
Cache TTL: 24 saat (configurable)
"""
import json
import time
import logging
from pathlib import Path
from typing import Dict, List, Optional, Set
from datetime import datetime

logger = logging.getLogger(__name__)


class ProductCostCache:
    """
    √úr√ºn maliyet cache'i - Disk tabanlƒ±, TTL destekli
    
    √ñzellikler:
    - 24 saatlik TTL (otomatik yenileme)
    - SKU ve Barcode indeksli
    - Disk'te kalƒ±cƒ± (restart'ta kaybolmaz)
    - Sadece satƒ±lan √ºr√ºnleri saklar (memory efficient)
    """
    
    def __init__(self, cache_dir: str = 'data', ttl_hours: int = 24):
        """
        Args:
            cache_dir: Cache dosyasƒ±nƒ±n konumu
            ttl_hours: Cache ge√ßerlilik s√ºresi (saat)
        """
        self.cache_dir = Path(cache_dir)
        self.cache_dir.mkdir(exist_ok=True)
        
        self.cache_file = self.cache_dir / 'product_cost_cache.json'
        self.ttl_seconds = ttl_hours * 3600
        
        # Cache structure: {sku: {cost, barcode, name, timestamp}}
        self.cache: Dict[str, Dict] = {}
        self.cache_by_barcode: Dict[str, Dict] = {}
        
        self._load_cache()
    
    def _load_cache(self):
        """Cache'i disk'ten y√ºkler"""
        if not self.cache_file.exists():
            logger.info("üì¶ Cache dosyasƒ± bulunamadƒ±, yeni cache olu≈üturulacak")
            return
        
        try:
            with open(self.cache_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            cache_timestamp = data.get('timestamp', 0)
            cache_age = time.time() - cache_timestamp
            
            # TTL kontrol√º
            if cache_age > self.ttl_seconds:
                logger.warning(
                    f"‚è∞ Cache expired ({cache_age/3600:.1f} saat). "
                    f"Yeni cache olu≈üturulacak."
                )
                return
            
            # Cache'i y√ºkle
            self.cache = data.get('products', {})
            
            # Barcode indeksini olu≈ütur
            self.cache_by_barcode = {
                product['barcode']: product
                for product in self.cache.values()
                if product.get('barcode')
            }
            
            logger.info(
                f"‚úÖ Cache y√ºklendi: {len(self.cache)} √ºr√ºn "
                f"({len(self.cache_by_barcode)} barcode'lu), "
                f"ya≈ü: {cache_age/3600:.1f} saat"
            )
            
        except Exception as e:
            logger.error(f"‚ùå Cache y√ºklenemedi: {e}")
            self.cache = {}
            self.cache_by_barcode = {}
    
    def _save_cache(self):
        """Cache'i disk'e kaydeder"""
        try:
            data = {
                'timestamp': time.time(),
                'created_at': datetime.now().isoformat(),
                'total_products': len(self.cache),
                'products': self.cache
            }
            
            with open(self.cache_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            
            logger.info(f"üíæ Cache kaydedildi: {len(self.cache)} √ºr√ºn")
            
        except Exception as e:
            logger.error(f"‚ùå Cache kaydedilemedi: {e}")
    
    def get_cached_cost(self, sku: str) -> Optional[Dict]:
        """
        SKU i√ßin cache'den maliyet getirir
        
        Returns:
            {
                'cost': float,
                'barcode': str,
                'name': str,
                'sku': str
            } veya None
        """
        return self.cache.get(sku)
    
    def get_cached_cost_by_barcode(self, barcode: str) -> Optional[Dict]:
        """Barcode i√ßin cache'den maliyet getirir"""
        return self.cache_by_barcode.get(barcode)
    
    def add_to_cache(self, sku: str, cost: float, barcode: str = None, name: str = None):
        """
        Cache'e yeni √ºr√ºn ekler
        
        Args:
            sku: √úr√ºn SKU kodu
            cost: Birim maliyet (KDV dahil)
            barcode: √úr√ºn barkodu
            name: √úr√ºn adƒ±
        """
        product_data = {
            'cost': float(cost),
            'barcode': barcode,
            'name': name,
            'sku': sku,
            'updated_at': datetime.now().isoformat()
        }
        
        self.cache[sku] = product_data
        
        if barcode:
            self.cache_by_barcode[barcode] = product_data
    
    def update_from_db_products(self, db_products: List) -> int:
        """
        Database'den gelen Product listesi ile cache'i g√ºnceller
        
        Args:
            db_products: Product model instance'larƒ±
            
        Returns:
            Eklenen/g√ºncellenen √ºr√ºn sayƒ±sƒ±
        """
        updated_count = 0
        
        for product in db_products:
            if not product.sku:
                continue
            
            # Mevcut cache'deki deƒüer
            existing = self.cache.get(product.sku)
            
            # Cost deƒüi≈ümi≈üse veya yeni √ºr√ºnse g√ºncelle
            product_cost = product.purchase_price_with_vat or 0.0
            
            if not existing or existing.get('cost') != product_cost:
                self.add_to_cache(
                    sku=product.sku,
                    cost=product_cost,
                    barcode=product.barcode,
                    name=product.name
                )
                updated_count += 1
        
        if updated_count > 0:
            self._save_cache()
            logger.info(f"üîÑ Cache g√ºncellendi: {updated_count} √ºr√ºn")
        
        return updated_count
    
    def get_missing_skus(self, required_skus: Set[str]) -> Set[str]:
        """
        Cache'de olmayan SKU'larƒ± bulur
        
        Args:
            required_skus: ƒ∞htiya√ß duyulan SKU listesi
            
        Returns:
            Cache'de olmayan SKU'lar
        """
        return required_skus - set(self.cache.keys())
    
    def get_cache_stats(self) -> Dict:
        """Cache istatistiklerini d√∂ner"""
        cache_age = 0
        if self.cache_file.exists():
            try:
                with open(self.cache_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                cache_age = time.time() - data.get('timestamp', 0)
            except:
                pass
        
        return {
            'total_products': len(self.cache),
            'products_with_barcode': len(self.cache_by_barcode),
            'cache_age_hours': cache_age / 3600,
            'cache_file': str(self.cache_file),
            'cache_valid': cache_age < self.ttl_seconds
        }
    
    def clear_cache(self):
        """Cache'i temizler (disk ve memory)"""
        self.cache = {}
        self.cache_by_barcode = {}
        
        if self.cache_file.exists():
            self.cache_file.unlink()
            logger.info("üóëÔ∏è Cache temizlendi")
